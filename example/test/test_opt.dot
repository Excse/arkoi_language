digraph CFG {
	graph [fontname = "Monospace"];
	node  [fontname = "Monospace", shape=box, style=filled, margin=0.1];
	edge  [fontname = "Monospace"];
	bgcolor = "#f7f7f7";
	splines = false;

	L0 [label="fun main() @u64:\l %01 @u64 = alloca\l $06 @bool = call ok(5)\l $07 @u32 = cast @bool $06\l $08 @u32 = mul @u32 1, $07\l $11 @u32 = add @u32 $08, 1\l $12 @s32 = cast @u32 $11\l $15 @f32 = call test1($12, 10.5)\l $17 @f32 = mul @f32 $15, 2.01\l $20 @f32 = sub @f32 $17, 42\l $21 @u64 = cast @f32 $20\l store @u64 $21, %01\l $22 @u64 = load %01\l ret $22\l\lIN:  { }\lOUT: { }\l"];
	L2 [label="fun ok(foo1 @f64) @bool:\l %01 @bool = alloca\l %02 @f64 = alloca\l store @f64 foo1, %02\l $03 @f64 = load %02\l $06 @bool = gth @f64 $03, 5\l if $06 then L4 else L5\l\lIN:  { foo1 }\lOUT: { %01 %02 }\l"];
	L2 -> L5 [label="Next"];
	L2 -> L4 [label="Branch"];
	L5 [label="L5:\l $09 @f64 = load %02\l $12 @bool = gth @f64 $09, 10\l if $12 then L7 else L8\l\lIN:  { %02 %01 }\lOUT: { %02 %01 }\l"];
	L5 -> L8 [label="Next"];
	L5 -> L7 [label="Branch"];
	L8 [label="L8:\l store @f64 21, %02\l goto L6\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L8 -> L6 [label="Next"];
	L7 [label="L7:\l store @f64 20, %02\l goto L6\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L7 -> L6 [label="Next"];
	L4 [label="L4:\l store @f64 0, %02\l goto L6\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L4 -> L6 [label="Next"];
	L6 [label="L6:\l $19 @s32 = div @s32 4, 2\l $20 @f64 = load %02\l $21 @f32 = call test2($19, $20)\l $22 @bool = cast @f32 $21\l store @bool $22, %01\l $23 @bool = load %01\l ret $23\l\lIN:  { %02 %01 }\lOUT: { }\l"];
	L10 [label="fun test1(foo2 @s32, bar @f64) @f32:\l %01 @f32 = alloca\l %02 @s32 = alloca\l %03 @f64 = alloca\l store @s32 foo2, %02\l store @f64 bar, %03\l %04 @f32 = alloca\l store @f32 0, %04\l $06 @s32 = load %02\l $07 @f64 = cast @s32 $06\l $08 @f64 = load %03\l $09 @bool = lth @f64 $07, $08\l if $09 then L12 else L13\l\lIN:  { foo2 bar }\lOUT: { %04 %01 %03 %02 }\l"];
	L10 -> L13 [label="Next"];
	L10 -> L12 [label="Branch"];
	L13 [label="L13:\l $20 @s32 = load %02\l $21 @f64 = cast @s32 $20\l $22 @f64 = load %03\l $23 @f64 = mul @f64 $21, $22\l $24 @f32 = cast @f64 $23\l store @f32 $24, %04\l goto L14\l\lIN:  { %02 %03 %01 %04 }\lOUT: { %01 %04 }\l"];
	L13 -> L14 [label="Next"];
	L12 [label="L12:\l $10 @f64 = load %03\l $11 @s32 = load %02\l $12 @f64 = cast @s32 $11\l $13 @f64 = mul @f64 $10, $12\l $14 @s32 = load %02\l $15 @s32 = load %02\l $16 @bool = lth @s32 $14, $15\l $17 @f64 = cast @bool $16\l $18 @f64 = add @f64 $13, $17\l $19 @f32 = cast @f64 $18\l store @f32 $19, %04\l goto L14\l\lIN:  { %03 %02 %01 %04 }\lOUT: { %01 %04 }\l"];
	L12 -> L14 [label="Next"];
	L14 [label="L14:\l $25 @f32 = load %04\l store @f32 $25, %01\l $26 @f32 = load %01\l ret $26\l\lIN:  { %04 %01 }\lOUT: { }\l"];
	L15 [label="fun test2(foo2 @s32, bar @f64) @f32:\l %01 @f32 = alloca\l %02 @s32 = alloca\l %03 @f64 = alloca\l store @s32 foo2, %02\l store @f64 bar, %03\l $04 @s32 = load %02\l $05 @f64 = cast @s32 $04\l $06 @f64 = load %03\l $07 @bool = lth @f64 $05, $06\l if $07 then L17 else L18\l\lIN:  { foo2 bar }\lOUT: { %01 %03 %02 }\l"];
	L15 -> L18 [label="Next"];
	L15 -> L17 [label="Branch"];
	L18 [label="L18:\l $13 @s32 = load %02\l $14 @f64 = cast @s32 $13\l $15 @f64 = load %03\l $16 @f64 = mul @f64 $14, $15\l store @f64 $16, %03\l $17 @f64 = load %03\l $18 @f32 = cast @f64 $17\l store @f32 $18, %01\l goto L16\l\lIN:  { %02 %03 %01 }\lOUT: { %01 }\l"];
	L18 -> L16 [label="Next"];
	L17 [label="L17:\l $08 @f64 = load %03\l $09 @s32 = load %02\l $10 @f64 = cast @s32 $09\l $11 @f64 = mul @f64 $08, $10\l $12 @f32 = cast @f64 $11\l store @f32 $12, %01\l goto L16\l\lIN:  { %03 %02 %01 }\lOUT: { %01 }\l"];
	L17 -> L16 [label="Next"];
	L16 [label="L16:\l $19 @f32 = load %01\l ret $19\l\lIN:  { %01 }\lOUT: { }\l"];
}
