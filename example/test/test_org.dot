digraph CFG {
	graph [fontname = "Monospace"];
	node  [fontname = "Monospace", shape=box, style=filled, margin=0.1];
	edge  [fontname = "Monospace"];
	bgcolor = "#f7f7f7";
	splines = false;

	L0 [label="fun main() @u64:\l %01 @u64 = alloca\l $02 @bool = const 1\l $03 @u32 = cast @bool $02\l $04 @f32 = const 5\l $05 @f64 = cast @f32 $04\l $06 @bool = call ok($05)\l $07 @u32 = cast @bool $06\l $08 @u32 = mul @u32 $03, $07\l $09 @bool = const 1\l $10 @u32 = cast @bool $09\l $11 @u32 = add @u32 $08, $10\l $12 @s32 = cast @u32 $11\l $13 @f32 = const 10.5\l $14 @f64 = cast @f32 $13\l $15 @f32 = call test1($12, $14)\l $16 @f32 = const 2.01\l $17 @f32 = mul @f32 $15, $16\l $18 @s32 = const 42\l $19 @f32 = cast @s32 $18\l $20 @f32 = sub @f32 $17, $19\l $21 @u64 = cast @f32 $20\l store @u64 $21, %01\l goto L1\l\lIN:  { }\lOUT: { %01 }\l"];
	L0 -> L1 [label="Next"];
	L1 [label="L1:\l $22 @u64 = load %01\l ret $22\l\lIN:  { %01 }\lOUT: { }\l"];
	L2 [label="fun ok(foo1 @f64) @bool:\l %01 @bool = alloca\l %02 @f64 = alloca\l store @f64 foo1, %02\l $03 @f64 = load %02\l $04 @f32 = const 5\l $05 @f64 = cast @f32 $04\l $06 @bool = gth @f64 $03, $05\l if $06 then L4 else L5\l\lIN:  { foo1 }\lOUT: { %01 %02 }\l"];
	L2 -> L5 [label="Next"];
	L2 -> L4 [label="Branch"];
	L5 [label="L5:\l $09 @f64 = load %02\l $10 @f32 = const 10\l $11 @f64 = cast @f32 $10\l $12 @bool = gth @f64 $09, $11\l if $12 then L7 else L8\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L5 -> L8 [label="Next"];
	L5 -> L7 [label="Branch"];
	L8 [label="L8:\l $15 @f32 = const 21\l $16 @f64 = cast @f32 $15\l store @f64 $16, %02\l goto L9\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L8 -> L9 [label="Next"];
	L9 [label="L9:\l goto L6\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L9 -> L6 [label="Next"];
	L6 [label="L6:\l $17 @s32 = const 4\l $18 @s32 = const 2\l $19 @s32 = div @s32 $17, $18\l $20 @f64 = load %02\l $21 @f32 = call test2($19, $20)\l $22 @bool = cast @f32 $21\l store @bool $22, %01\l goto L3\l\lIN:  { %01 %02 }\lOUT: { %01 }\l"];
	L6 -> L3 [label="Next"];
	L7 [label="L7:\l $13 @f32 = const 20\l $14 @f64 = cast @f32 $13\l store @f64 $14, %02\l goto L9\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L7 -> L9 [label="Next"];
	L4 [label="L4:\l $07 @f32 = const 0\l $08 @f64 = cast @f32 $07\l store @f64 $08, %02\l goto L6\l\lIN:  { %01 %02 }\lOUT: { %01 %02 }\l"];
	L4 -> L6 [label="Next"];
	L3 [label="L3:\l $23 @bool = load %01\l ret $23\l\lIN:  { %01 }\lOUT: { }\l"];
	L10 [label="fun test1(foo2 @s32, bar @f64) @f32:\l %01 @f32 = alloca\l %02 @s32 = alloca\l %03 @f64 = alloca\l store @s32 foo2, %02\l store @f64 bar, %03\l $04 @s32 = load %02\l $05 @f64 = cast @s32 $04\l $06 @f64 = load %03\l $07 @bool = lth @f64 $05, $06\l if $07 then L12 else L13\l\lIN:  { bar foo2 }\lOUT: { %01 %02 %03 }\l"];
	L10 -> L13 [label="Next"];
	L10 -> L12 [label="Branch"];
	L13 [label="L13:\l $18 @s32 = load %02\l $19 @f64 = cast @s32 $18\l $20 @f64 = load %03\l $21 @f64 = mul @f64 $19, $20\l $22 @f32 = cast @f64 $21\l store @f32 $22, %01\l goto L11\l\lIN:  { %01 %02 %03 }\lOUT: { %01 }\l"];
	L13 -> L11 [label="Next"];
	L12 [label="L12:\l $08 @f64 = load %03\l $09 @s32 = load %02\l $10 @f64 = cast @s32 $09\l $11 @f64 = mul @f64 $08, $10\l $12 @s32 = load %02\l $13 @s32 = load %02\l $14 @bool = lth @s32 $12, $13\l $15 @f64 = cast @bool $14\l $16 @f64 = add @f64 $11, $15\l $17 @f32 = cast @f64 $16\l store @f32 $17, %01\l goto L11\l\lIN:  { %01 %02 %03 }\lOUT: { %01 }\l"];
	L12 -> L11 [label="Next"];
	L11 [label="L11:\l $23 @f32 = load %01\l ret $23\l\lIN:  { %01 }\lOUT: { }\l"];
	L15 [label="fun test2(foo2 @s32, bar @f64) @f32:\l %01 @f32 = alloca\l %02 @s32 = alloca\l %03 @f64 = alloca\l store @s32 foo2, %02\l store @f64 bar, %03\l $04 @s32 = load %02\l $05 @f64 = cast @s32 $04\l $06 @f64 = load %03\l $07 @bool = lth @f64 $05, $06\l if $07 then L17 else L18\l\lIN:  { bar foo2 }\lOUT: { %01 %02 %03 }\l"];
	L15 -> L18 [label="Next"];
	L15 -> L17 [label="Branch"];
	L18 [label="L18:\l $13 @s32 = load %02\l $14 @f64 = cast @s32 $13\l $15 @f64 = load %03\l $16 @f64 = mul @f64 $14, $15\l store @f64 $16, %03\l goto L19\l\lIN:  { %01 %02 %03 }\lOUT: { %01 %03 }\l"];
	L18 -> L19 [label="Next"];
	L19 [label="L19:\l $17 @f64 = load %03\l $18 @f32 = cast @f64 $17\l store @f32 $18, %01\l goto L16\l\lIN:  { %01 %03 }\lOUT: { %01 }\l"];
	L19 -> L16 [label="Next"];
	L17 [label="L17:\l $08 @f64 = load %03\l $09 @s32 = load %02\l $10 @f64 = cast @s32 $09\l $11 @f64 = mul @f64 $08, $10\l $12 @f32 = cast @f64 $11\l store @f32 $12, %01\l goto L16\l\lIN:  { %01 %02 %03 }\lOUT: { %01 }\l"];
	L17 -> L16 [label="Next"];
	L16 [label="L16:\l $19 @f32 = load %01\l ret $19\l\lIN:  { %01 }\lOUT: { }\l"];
}
