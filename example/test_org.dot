digraph CFG {
	graph [fontname = "Monospace"];
	node  [fontname = "Monospace", shape=box, style=filled, margin=0.1];
	edge  [fontname = "Monospace"];
	bgcolor = "#f7f7f7";
	splines = false;

	L0 [label="fun main() @u64:\l $01 @u64 = alloca\l $02 @s32 = const 1\l $03 @u32 = cast @s32 $02\l $04 @s32 = const 2\l $05 @u32 = cast @s32 $04\l $06 @s32 = const 3\l $07 @u32 = cast @s32 $06\l $08 @s32 = const 4\l $09 @u32 = cast @s32 $08\l $10 @s32 = const 5\l $11 @u32 = cast @s32 $10\l $12 @s32 = const 6\l $13 @u32 = cast @s32 $12\l $14 @s32 = const 7\l $15 @u32 = cast @s32 $14\l $16 @s32 = const 8\l $17 @u32 = cast @s32 $16\l $18 @bool = call calling_convention($03, $05, $07, $09, $11, $13, $15, $17)\l $19 @bool = const 1\l $20 @u32 = cast @bool $19\l $21 @f32 = const 5\l $22 @f64 = cast @f32 $21\l $23 @bool = call ok($22)\l $24 @u32 = cast @bool $23\l $25 @u32 = mul @u32 $20, $24\l $26 @bool = const 1\l $27 @u32 = cast @bool $26\l $28 @u32 = add @u32 $25, $27\l $29 @s32 = cast @u32 $28\l $30 @f32 = const 10.5\l $31 @f64 = cast @f32 $30\l $32 @f32 = call test1($29, $31)\l $33 @f32 = const 2.01\l $34 @f32 = mul @f32 $32, $33\l $35 @s32 = const 42\l $36 @f32 = cast @s32 $35\l $37 @f32 = sub @f32 $34, $36\l $38 @u64 = cast @f32 $37\l store @u64 $38, $01\l goto L1\l"];
	L0 -> L1 [label="Next"];
	L1 [label="L1:\l $39 @u64 = load $01\l ret $39\l"];
	L2 [label="fun ok(foo1 @f64) @bool:\l $01 @bool = alloca\l $02 @f64 = alloca\l store @f64 foo1, $02\l $03 @f64 = load $02\l $04 @f32 = const 5\l $05 @f64 = cast @f32 $04\l $06 @bool = gth @f64 $03, $05\l if $06 then L4 else L5\l"];
	L2 -> L5 [label="Next"];
	L2 -> L4 [label="Branch"];
	L5 [label="L5:\l $09 @f64 = load $02\l $10 @f32 = const 10\l $11 @f64 = cast @f32 $10\l $12 @bool = gth @f64 $09, $11\l if $12 then L7 else L8\l"];
	L5 -> L8 [label="Next"];
	L5 -> L7 [label="Branch"];
	L8 [label="L8:\l $15 @f32 = const 21\l $16 @f64 = cast @f32 $15\l store @f64 $16, $02\l goto L9\l"];
	L8 -> L9 [label="Next"];
	L9 [label="L9:\l goto L6\l"];
	L9 -> L6 [label="Next"];
	L6 [label="L6:\l $17 @s32 = const 2\l $18 @f64 = load $02\l $19 @f32 = call test2($17, $18)\l $20 @bool = cast @f32 $19\l store @bool $20, $01\l goto L3\l"];
	L6 -> L3 [label="Next"];
	L7 [label="L7:\l $13 @f32 = const 20\l $14 @f64 = cast @f32 $13\l store @f64 $14, $02\l goto L9\l"];
	L7 -> L9 [label="Next"];
	L4 [label="L4:\l $07 @f32 = const 0\l $08 @f64 = cast @f32 $07\l store @f64 $08, $02\l goto L6\l"];
	L4 -> L6 [label="Next"];
	L3 [label="L3:\l $21 @bool = load $01\l ret $21\l"];
	L10 [label="fun test1(foo2 @s32, bar @f64) @f32:\l $01 @f32 = alloca\l $02 @s32 = alloca\l $03 @f64 = alloca\l store @s32 foo2, $02\l store @f64 bar, $03\l $04 @s32 = load $02\l $05 @f64 = cast @s32 $04\l $06 @f64 = load $03\l $07 @bool = lth @f64 $05, $06\l if $07 then L12 else L13\l"];
	L10 -> L13 [label="Next"];
	L10 -> L12 [label="Branch"];
	L13 [label="L13:\l $13 @s32 = load $02\l $14 @f64 = cast @s32 $13\l $15 @f64 = load $03\l $16 @f64 = mul @f64 $14, $15\l $17 @f32 = cast @f64 $16\l store @f32 $17, $01\l goto L11\l"];
	L13 -> L11 [label="Next"];
	L12 [label="L12:\l $08 @f64 = load $03\l $09 @s32 = load $02\l $10 @f64 = cast @s32 $09\l $11 @f64 = mul @f64 $08, $10\l $12 @f32 = cast @f64 $11\l store @f32 $12, $01\l goto L11\l"];
	L12 -> L11 [label="Next"];
	L11 [label="L11:\l $18 @f32 = load $01\l ret $18\l"];
	L15 [label="fun test2(foo2 @s32, bar @f64) @f32:\l $01 @f32 = alloca\l $02 @s32 = alloca\l $03 @f64 = alloca\l store @s32 foo2, $02\l store @f64 bar, $03\l $04 @s32 = load $02\l $05 @f64 = cast @s32 $04\l $06 @f64 = load $03\l $07 @bool = lth @f64 $05, $06\l if $07 then L17 else L18\l"];
	L15 -> L18 [label="Next"];
	L15 -> L17 [label="Branch"];
	L18 [label="L18:\l $13 @s32 = load $02\l $14 @f64 = cast @s32 $13\l $15 @f64 = load $03\l $16 @f64 = mul @f64 $14, $15\l store @f64 $16, $03\l goto L19\l"];
	L18 -> L19 [label="Next"];
	L19 [label="L19:\l $17 @f64 = load $03\l $18 @f32 = cast @f64 $17\l store @f32 $18, $01\l goto L16\l"];
	L19 -> L16 [label="Next"];
	L17 [label="L17:\l $08 @f64 = load $03\l $09 @s32 = load $02\l $10 @f64 = cast @s32 $09\l $11 @f64 = mul @f64 $08, $10\l $12 @f32 = cast @f64 $11\l store @f32 $12, $01\l goto L16\l"];
	L17 -> L16 [label="Next"];
	L16 [label="L16:\l $19 @f32 = load $01\l ret $19\l"];
	L20 [label="fun calling_convention(a @u32, b @u32, c @u32, d @u32, e @u32, f @u32, g @u32, h @u32) @bool:\l $01 @bool = alloca\l $02 @u32 = alloca\l $03 @u32 = alloca\l $04 @u32 = alloca\l $05 @u32 = alloca\l $06 @u32 = alloca\l $07 @u32 = alloca\l $08 @u32 = alloca\l $09 @u32 = alloca\l store @u32 a, $02\l store @u32 b, $03\l store @u32 c, $04\l store @u32 d, $05\l store @u32 e, $06\l store @u32 f, $07\l store @u32 g, $08\l store @u32 h, $09\l $10 @bool = const 1\l store @bool $10, $01\l goto L21\l"];
	L20 -> L21 [label="Next"];
	L21 [label="L21:\l $11 @bool = load $01\l ret $11\l"];
}
